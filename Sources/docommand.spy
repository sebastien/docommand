@module docommand
@version 0.1.0
@import re
@import os

@shared ERR_MISSING_ARGUMENTS = "Missing arguments"

@class Command

	@shared   RE_ARGUMENT = re compile "\${(\d+)([\:=]([^}]+))?}"
	@property name:String = ""
	@property expression:String = ""
	@property parsedExpression:List = []
	@property arguments:List = []

	@constructor name:String, expression:String
		self name = name
		self expression = expression
		self parsedExpression = _parseExpression (expression)
	@end

	@method _parseExpression expression:String
		var res       = []
		var offset    = 0
		# FIXME: Does not work either
		#while offset < (expression length())
		while offset < len(expression)
			var match = RE_ARGUMENT search ( expression,offset )
			if match
				argument_number  = int( match group (1) )
				default_argument = match group (3)
				default_argument_type = match group (2)
				res append ( ["T",expression[offset:match start()]] )
				if default_argument
					res append (["O",argument_number,default_argument_type,default_argument])
				else
					res append (["A",argument_number,None,None])
				end
				offset = match end()
			else
				res append ( ["T", expression[offset:]] )
				offset = len(expression)
			end
		end
		return res
	@end
	
	@method addArgument defaultValue
		self arguments append (defaultValue or "")
	@end

	@method getArguments arguments=[]
	| Returns a list representing the initialized arguments from the given
	| (optional list of argument). When no argument is given, the the default
	| argument values are returned.
		var res = []
		arguments :: {a|res append (a)}
		# FIXME: while res length() < self arguments length()
		while res length() < self arguments length()
			res append (self arguments [res length() - 1])
		end
		return res
	@end
	
	@method getArity
		
	@end

	@method fill arguments:List
	| Fills the command template with the given arguments and returns the filled
	| expression as a string.
		var res       = []
		var offset    = 0
		var arg_count = 0
		for element in parsedExpression
			if element[0] == "T"
				res append (element[1])
			if element[0] == "A"
				var arg_number = element[1]
				if (len(arguments) <= arg_number)
					raise (ERR_MISSING_ARGUMENTS)
				else
					res append (arguments[arg_number])
				end
			if element[0] == "O"
				var arg_number = element[1]
				if (len(arguments) <= arg_number)
					if element[2] == ":"
						res append ("`" + element[3] + "`")
					else
						res append (element[3])
					end
				else
					res append (arguments[arg_number])
				end
			end
		end
		return "" join (res)
	@end

	@method describe
		return " " join ([
			name
			"\t"
			expression
		])
	@end
@end

@class Parser
| Parses the '~/.docommand' file and returns a list of Command objects that can
| be used by the interpreter.

	@method parseFile path:String
		var fd = file(path)
		var commands = []
		for line:String in fd readlines()
			line = line strip()
			if line and line [0] != "#"
				var command_name, command_desc = line split (":",1)
				command_name = command_name replace ("\t", "") strip()
				command_desc = command_desc strip()
				commands append (new Command(command_name, command_desc))
			end
		end
		return commands
	@end

@end

@class Interpreter

	@property parser   = new Parser()
	@property commands = []

	@constructor configuration="~/.docommands"
		commands = parser parseFile (os path expanduser(configuration))
	@end
	
	@method commandWithName name:String
		for command in commands
			if command name == name
				return command
			end
		end
		raise new Exception "Command not found"
	@end
	
	@method run arguments:List
		var command_name = arguments[0]
		var command = commandWithName (command_name)
		var script  = command fill (arguments[1:])
		print ("do:" + script)
		os system (script)
	@end

	@method listCommands
		commands :: {c| print (c describe())}
	@end

@end

@main args
	var i = new Interpreter()
	if len (args) == 1
		i listCommands()
	else
		i run (args[1:])
	end
@end

# EOF - vim: ts=4 sw=4 noet syn=sugar